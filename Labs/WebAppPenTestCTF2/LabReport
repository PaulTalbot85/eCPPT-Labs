Here is your **updated and complete INE Client-Side Attacks CTF Lab Report**, including **Flag 4** and the exact steps used to retrieve it.

---

# 🛡️ INE CTF Walkthrough – Client-Side Attacks (Lab Completion)

## 🧾 Summary

This document serves as a detailed, step-by-step penetration test-style walkthrough for the INE Client-Side Attacks CTF lab. The lab simulates a real-world environment where the tester uses phishing and web exploitation techniques to gain access to internal systems, extract sensitive data, and retrieve **5 CTF flags**.

---

## 🌐 Lab Info

* **Target Domain:** `target.ine.local`
* **Internal Targets:** Discovered via post-exploitation techniques
* **Total Flags:** 5

---

## 🎯 Flag 1 – JavaScript Injection in Hidden Script Block

### 🔍 Discovery

While exploring the web application, I discovered a hidden script block in the page source of `/about-ctf?total_flags=4` that dynamically evaluated JavaScript code:

```html
<script>
    const urlParams = new URLSearchParams(window.location.search);
    const totalFlags = urlParams.get('total_flags') || 4;

    try {
        const result = eval(totalFlags); // FLAG1_e6e16842770a4a49abe3dcee1db00161
        document.getElementById('flags-result').innerText = `Total Flags to Capture: ${result}`;
    } catch (error) {
        document.getElementById('flags-result').innerText = `Error: Invalid flag number`;
    }
</script>
```

### 🛠️ Exploit

No user interaction needed — the `eval()` statement exposed the flag directly in the HTML source.

**✅ Flag 1: `FLAG1_e6e16842770a4a49abe3dcee1db00161`**

---

## 🎯 Flag 2 – SQL Injection on Login Page

### 🔍 Discovery

The login form was tested with common SQL injection payloads.

### 🛠️ Exploit

```text
Email:     ' OR 1=1 --
Password:  anything
```

This bypassed authentication and logged in as the first user (bob). His profile page revealed:

* **Email:** [bob@inestudent.com](mailto:bob@inestudent.com)
* **Mobile:** 6694567890
* **Address:** 93 Main St, NY
* **Secret:** `FLAG2_08268a4f3403404c8888da7c83da5367`

**✅ Flag 2: `FLAG2_08268a4f3403404c8888da7c83da5367`**

---

## 🎯 Flag 3 – SQL Injection via Search Field

### 🔍 Discovery

The `/search` endpoint allowed input filtering with SQL injection.

### 🛠️ Exploit

```text
Payload: ' OR 1=1 ORDER BY 1 --
```

This revealed a full list of users and exposed Flag 3:

* **bob** (187985)
* **alice** (243344)
* **charlie** (354679)
* **rooty** (576786)
* **admin** (868871)
* **FLAG3\_d4d382a5bdae4370b8b4d1529bcce1ca** (996783)

**✅ Flag 3: `FLAG3_d4d382a5bdae4370b8b4d1529bcce1ca`**

---

## 🎯 Flag 4 – IDOR on Profile Endpoint (rooty)

### 🔍 Discovery

After bypassing login via SQL injection, I noted the profile URL pattern:

```
http://target.ine.local/profile/{user_id}
```

### 🛠️ Exploit

Used the admin login bypass again:

```text
Email:     admin' OR 1=1 -- -
Password:  anything
```

Then manually changed the URL to access other users’ profiles. Navigating to:

```
http://target.ine.local/profile/576786
```

This loaded `rooty`’s profile, revealing:

* **Secret:** `FLAG4_bf8b362f4414474398e5f939d5b2f1aa`

### 📌 Vulnerability Type

* **IDOR (Insecure Direct Object Reference)** — no access control on numeric profile IDs.

**✅ Flag 4: `FLAG4_bf8b362f4414474398e5f939d5b2f1aa`**

---

## ⚒️ Tools Used

* `Gobuster` – directory brute-forcing
* `curl` and browser DevTools – manual request manipulation
* Manual SQL Injection
* Enumeration of user IDs via `/search`
* Manual IDOR exploitation

---

## 📝 Flags Summary

| Flag # | Value                                     |
| ------ | ----------------------------------------- |
| Flag 1 | `FLAG1_e6e16842770a4a49abe3dcee1db00161`  |
| Flag 2 | `FLAG2_08268a4f3403404c8888da7c83da5367`  |
| Flag 3 | `FLAG3_d4d382a5bdae4370b8b4d1529bcce1ca`  |
| Flag 4 | `FLAG4_bf8b362f4414474398e5f939d5b2f1aa`  |

---

