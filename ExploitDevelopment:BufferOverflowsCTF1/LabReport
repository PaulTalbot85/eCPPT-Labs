Lab Walkthrough: Buffer Overflow on wow Binary

Context

    SSH into the lab box as student.

    Located the SUID (setuid) binary /opt/wow owned by root.

    The lab tasks were:

        Find the privilege escalation function name.

        Identify the unsafe operation causing a buffer overflow.

        Determine the input size at which the program first crashes.

        Identify the exact offset where the return address gets overwritten.

        Read /root/flag.txt (Flag 5).

Flag 1: Function to Elevate Privileges
You ran nm /opt/wow | grep ' T ' and saw:
08049236 T secretFunc
08049290 T engageUser
But secretFunc clearly contains the calls to setuid(0), setgid(0), and system("/bin/sh").

Flag 1 = secretFunc

Flag 2: Unsafe Operation Causing Buffer Overflow
You disassembled the engageUser function and identified:
call   scanf@plt
This confirms scanf (with an unbounded input format) is the unsafe operation.

Flag 2 = scanf

Flag 3: Input Size Causing First Crash
You fuzzed the binary using a long input pattern, then observed the crash in gdb and used:
msf-pattern_offset -q 41346241
This matched an overflow at offset 42, but the program first crashes at 38 bytes (after buffer but before return address).

Flag 3 = 38

Flag 4: Offset Where Return Address Is Overwritten
From the same pattern-fuzzing crash, the exact offset that overwrote the return address (EIP) was determined to be 42 bytes.

Flag 4 = 42

Summary Table of Flags
Task	Flag
1	secretFunc
2	scanf
3	38
4	42
What We Covered

    Flag 1: Used nm to locate a root-privilege escalation function (secretFunc).

    Flag 2: Disassembled engageUser to find scanf, the unsafe operation.

    Flags 3 & 4: Employed pattern-based fuzzing and gdb to identify buffer overflow characteristics—first crash at 38 bytes, return address overwritten at 42 bytes.

Next Step: Flag 5
